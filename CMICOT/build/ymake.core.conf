FAKEID=r3021006_ignietferro_602

CURDIR=.
BINDIR=bin:/
SRCDIR=
YMAKE=ymake
ECHO=echo
# Only to fix warning from library/build_info
SANDBOX_TASK_ID=0

when ($ARCH_AARCH64) {
    OS_SDK=ubuntu-16
}

when (!$OS_SDK) {
    OS_SDK=system
}

when ($OS_SDK == "system") {
    OS_SDK_ROOT=
}
otherwise {
    OS_SDK_ROOT=$(OS_SDK_ROOT)
}

ARCH_OPT=
TARGET_OPT=

when ($USE_GCCFILTER == "yes") {
    GCCFILTER=${ARCADIA_ROOT}/devtools/gccfilter/gccfilter.pl
    when ($USE_GCCFILTER_COLOR == "yes") {
        GCCFILTER+=-c
    }
}
otherwise {
    GCCFILTER=
}

when ($YNDEXER_RESOURCE_ID) {
    YNDEXER="$(YNDEXER)/yndexer"
}

when ($YNDEXER) {
    YNDEXER_ARGS=$YMAKE_PYTHON ${input:"build/scripts/yndexer.py"} $YNDEXER $(SOURCE_ROOT) ${input:SRC} $YNDEXER_OUTPUT
}
otherwise {
    YNDEXER_ARGS=
}

COVERAGE_FLAGS=
when ($GCOV_COVERAGE) {
    COVERAGE_FLAGS=-fprofile-arcs -ftest-coverage
    EXTRA_OUTPUT=$EXTRA_COVERAGE_OUTPUT
}
when ($CLANG_COVERAGE) {
    COVERAGE_FLAGS+=-fprofile-instr-generate -fcoverage-mapping
}
when ($GCOV_COVERAGE || $CLANG_COVERAGE) {
    USE_STDLIB=
}

when ($ARCH_AARCH64 == "yes") {
    CFLAGS+=-fsigned-char -fexceptions -DIOV_MAX=1024
}
when ($ARCH_PPC64LE == "yes") {
    CFLAGS+=-fsigned-char -fexceptions
}

when ($OS_CYGWIN == "yes") {
    CFLAGS+=-D_LDBL_EQ_DBL=1 -U__STRICT_ANSI__
    USE_ASMLIB=no
    FSTACK=
    PICFLAGS=
}

CFLAGS+=$COVERAGE_FLAGS
LDFLAGS+=$COVERAGE_FLAGS

#LDFLAGS+=-fuse-ld=lld-4.0

RLGEN_FLAGS=-G2
RAGEL_FLAGS=
RAGEL6_FLAGS=-CG2

when ($MSVC == "yes") {
    RLGEN_FLAGS=-T0
    RAGEL6_FLAGS=-CT0
}

SKIP_JUNK=yes

# USE_INTERNAL_STL is an internal flag (set on by default) but may be used externally to
# select system standard C++ library when USE_INTERNAL_STL=no is set.
#
# USE_STL_SYSTEM=yes is a regular way to select system standard C++ library.
#
when ($USE_STL_SYSTEM == "yes") {
    USE_INTERNAL_STL=no
}

when ($USE_INTERNAL_STL == "no") {
    USE_STL_SYSTEM=yes
}
otherwise {
    USE_INTERNAL_STL=yes
}

USE_ARCADIA_PYTHON=yes
USE_ARCADIA_LIBM=no
USE_EAT_MY_DATA=no

SFDL_TMP_OUT= ${output;tmp:SRC.tmp}

PERL=perl
ARCH_TOOL=${tool:"tools/archiver"}
PROTOC=${tool:"contrib/tools/protoc"}
PROTOC_STYLEGUIDE=${tool:"contrib/tools/protoc/plugins/cpp_styleguide"}
FML_TOOL=${tool:"tools/relev_fml_codegen"}
FML_UNUSED_TOOL=${tool:"tools/relev_fml_unused"}
LUA_TOOL=${tool:"tools/lua"}
ENUM_PARSER_TOOL=${tool:"tools/enum_parser/enum_parser"}

USE_INTERNAL_CUDA=yes
when ($CUDA_ROOT) {
    USE_INTERNAL_CUDA=no
}
when ($USE_INTERNAL_CUDA == "yes") {
    CUDA_ROOT=$(CUDA)
}

NVCC=$CUDA_ROOT/bin/nvcc
when ($CXX_COMPILER) {
    when ($USE_INTERNAL_CUDA == "yes") {
        when ($ARCH_X86_64 == "yes") {
            NVCCOPTS+=--compiler-bindir=$(CUDA)/compiler/gcc/bin/g++-4.9
        }
        when ($ARCH_AARCH64 == "yes") {
            NVCCOPTS+=--compiler-bindir=$(CUDA)/compiler/gcc/bin/aarch64-linux-g++
        }
    }
    when ($USE_INTERNAL_CUDA == "no") {
        NVCCOPTS+=--compiler-bindir=$CXX_COMPILER
    }
}

CYTHON_SCRIPT=${input:"contrib/tools/cython/cython.py"}
CYTHON_OUTPUT_INCLUDES=${output_include;hide:"contrib/tools/python/src/Include/Python.h"} \
${output_include;hide:"contrib/tools/python/src/pyconfig.h"} \
${output_include;hide:"contrib/tools/python/src/Include/compile.h"} \
${output_include;hide:"contrib/tools/python/src/Include/frameobject.h"} \
${output_include;hide:"contrib/tools/python/src/Include/traceback.h"}

when ($USE_SYSTEM_PYTHON) {
    USE_ARCADIA_PYTHON=no
    when ($USE_SYSTEM_PYTHON == "2.7") {
        SYSTEM_PYTHON27=yes
    }
    when ($USE_SYSTEM_PYTHON == "3.5") {
        SYSTEM_PYTHON35=yes
    }
    when ($USE_SYSTEM_PYTHON == "3.6") {
        SYSTEM_PYTHON36=yes
    }
}

#TODO: reuse PYTHON_PATH in other vars
PYTHON_TOOL=${ARCADIA_BUILD_ROOT}/contrib/tools/python/python
PYTHON_PATH=contrib/tools/python
PYTHON_BS_TOOL=${tool:"contrib/tools/python/bootstrap"}
when ($USE_ARCADIA_PYTHON == "no") {
    PYTHON_TOOL=python
    PYTHON_BS_TOOL=python
}
DEFAULT_ALLOCATOR=LF

when ($OS_ANDROID == "yes" || $MSVC == "yes") {
    DEFAULT_ALLOCATOR=J
}

when ($OS_CYGWIN == "yes") {
    DEFAULT_ALLOCATOR=SYSTEM
}

when ($SANITIZER_TYPE) {
    when ($SANITIZER_TYPE != "no") {
        DEFAULT_ALLOCATOR=SYSTEM
    }
    when ($SANITIZER_TYPE == "pg") {
        DEFAULT_ALLOCATOR=BS
    }
}

macro CHECK_CONFIG_H(Conf) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/check_config_h.py"} ${input;rootrel:Conf} ${output;noext:Conf.config.cpp} ${kv;hide:"p CH"} ${kv;hide:"pc yellow"})
    OUTPUT_INCLUDES=$Conf
}

PROTO_NAMESPACE=
PROTO_PATH=$ARCADIA_ROOT/contrib/libs/protobuf

macro CPP_PROTO_CMD(File) {
    MACRO_PROP(CMD ${cwd;rootdir;input:File} $PROTOC -I=./$PROTO_NAMESPACE -I=$ARCADIA_ROOT/$PROTO_NAMESPACE -I=$ARCADIA_BUILD_ROOT -I=$PROTO_PATH --cpp_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE --cpp_styleguide_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE --plugin=protoc-gen-cpp_styleguide=$PROTOC_STYLEGUIDE ${input;rootrel:File} ${output;hide;norel;noext:File.pb.cc} ${output;hide;norel;noext:File.pb.h} ${kv;hide:"p PB"} ${kv;hide:"pc yellow"} $GRPC_CPP_ARGS)
    MACRO_PROP(INCLUDE_CPP yes)
    MACRO_PROP(PEERDIR contrib/libs/protobuf)
}

macro PY_PROTO_CMD(File) {
    MACRO_PROP(CMD ${cwd;rootdir;input:File} $PROTOC -I=. -I=$ARCADIA_ROOT -I=$PROTO_PATH --python_out=$ARCADIA_BUILD_ROOT ${input;rootrel:File} ${output;hide;norel;noext;suf=_pb2.py:File} ${kv;hide:"p PT"} ${kv;hide:"pc yellow"} $GRPC_PY_ARGS)
}

macro JAVA_PROTO_CMD(File) {
    MACRO_PROP(CMD ${cwd;rootdir;input:File} $YMAKE_PYTHON ${input:"build/scripts/tared_protoc.py"} --tar-output ${output;norel;noext;suf=.jsrc:File} --protoc-out-dir $ARCADIA_BUILD_ROOT/java_out $PROTOC -I=. -I=$ARCADIA_ROOT -I=$PROTO_PATH --java_out=$ARCADIA_BUILD_ROOT/java_out ${input;rootrel:File} ${kv;hide:"p PT"} ${kv;hide:"pc yellow"} $GRPC_JAVA_ARGS)
}

macro XS_PROTO(File, Dir, Outputs...) {
    MACRO_PROP(CMD $PROTOC -I=${ARCADIA_ROOT}/${Dir} -I=${ARCADIA_ROOT} -I=${PROTO_PATH} --perlxs_out=${BINDIR} ${input:File} ${hide;output:Outputs})
    PEERDIR(${Dir})
    ADDINCL(${ARCADIA_BUILD_ROOT}/${Dir})
}

macro PROTO2FBS(File) {
    MACRO_PROP(CMD ${cwd:BINDIR} ${tool:"contrib/tools/flatc"} -I . -I ${ARCADIA_ROOT} --proto ${input:File} ${output;hide;noext:File.fbs} ${kv;hide:"p FBS"} ${kv;hide:"pc yellow"})
}

when ($PY_PROTOS_FOR == "yes") {
    PEERDIR+=contrib/libs/protobuf/python
}

macro CPP_EVLOG_CMD(File) {
    MACRO_PROP(CMD ${cwd:ARCADIA_ROOT} $PROTOC --cpp_out=$ARCADIA_BUILD_ROOT --plugin=protoc-gen-cpp_styleguide=$PROTOC_STYLEGUIDE --cpp_styleguide_out=$ARCADIA_BUILD_ROOT --plugin=protoc-gen-event2cpp=${tool:"tools/event2cpp"} --event2cpp_out=$ARCADIA_BUILD_ROOT -I. -I$ARCADIA_ROOT -I$PROTO_PATH -I$ARCADIA_ROOT/library/eventlog ${input;rootrel:SRC} ${output;chksum;hide:SRC.pb.cc} ${output;chksum;hide:SRC.pb.h} ${kv;hide:"p EV"} ${kv;hide:"pc yellow"})
    MACRO_PROP(PEERDIR library/eventlog contrib/libs/protobuf)
    MACRO_PROP(INCLUDE_CPP yes)
}

macro PY_EVLOG_CMD(File) {
    MACRO_PROP(CMD $COPY_CMD ${input:File} ${output;noext;norel;suf=_ev.proto:File} ${kv;hide:"p EV"} ${kv;hide:"pc yellow"})
    MACRO_PROP(PEERDIR library/eventlog/proto)
}

macro JAVA_EVLOG_CMD(File) {
    MACRO_PROP(CMD $COPY_CMD ${input:File} ${output;noext;norel;suf=_ev.proto:File} ${kv;hide:"p EV"} ${kv;hide:"pc yellow"})
    MACRO_PROP(PEERDIR library/eventlog/proto)
}

select ($SWIG_LANG) {
    "python" ? {
        SWIG_OUTPUT=${output;tobindir;linktolib;noauto;add_to_outs;hide:REALPRJNAME.py}
    }
    "perl" ? {
        SWIG_OUTPUT= ${output;tobindir;linktolib;noauto;add_to_outs;hide:REALPRJNAME.pm}
        SWIG_FLAGS+= -shadow
        PEERDIR+=contrib/libs/perl-core
    }
}

RUN_NO_SANITIZE=$YMAKE_PYTHON ${input:"build/scripts/run_tool.py"} --

when ($IS_CROSS_SANITIZE) {
    RUN_NO_SANITIZE=
}

YIELD=$YMAKE_PYTHON ${input:"build/scripts/yield_line.py"} -- ${BINDIR}/__args
XARGS=$YMAKE_PYTHON ${input:"build/scripts/xargs.py"} -- ${BINDIR}/__args

RESPFILE_CMD=$YMAKE_PYTHON ${input:"build/scripts/writer.py"}

FS_TOOLS=$YMAKE_PYTHON ${input:"build/scripts/fs_tools.py"}

COPY_CMD=$FS_TOOLS copy
REMOVE_FILE=$FS_TOOLS remove
MOVE_FILE=$FS_TOOLS rename

MSVC_DYNAMICBASE=/DYNAMICBASE
when ($ALLOCATOR == "LF") {
    MSVC_DYNAMICBASE=/DYNAMICBASE:NO
}

SANITIZER_CFLAGS=

GRPC_FLAG=no
macro GRPC() {
    SET(GRPC_FLAG yes)
}

GRPC_CPP_ARGS=
GRPC_PY_ARGS=
GRPC_JAVA_ARGS=

module BASE_UNIT {
    MODULE_PROP(EXTS .*)
    MODULE_PROP(CMD TOUCH_UNIT)
    MODULE_PROP(NODE_TYPE Bundle)
    MODULE_PROP(PEERDIR_POLICY as_include)
    MODULE_PROP(PROTO_POLICY CPP_PROTO)
    MODULE_PROP(RESTRICTED GRPC)

    when ($GRPC_FLAG == "yes") {
        GRPC_CPP_ARGS+=--plugin=protoc-gen-grpc_cpp=${tool:"contrib/tools/protoc/plugins/grpc_cpp"} --grpc_cpp_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE ${output;hide;norel;noext:File.grpc.pb.cc} ${output;hide;norel;noext:File.grpc.pb.h}
        GRPC_PY_ARGS+=--plugin=protoc-gen-grpc_py=${tool:"contrib/tools/protoc/plugins/grpc_python"} --grpc_py_out=$ARCADIA_BUILD_ROOT ${output;hide;norel;noext;suf=_pb2_grpc.py:File}
        GRPC_JAVA_ARGS+=--plugin=protoc-gen-grpc_java=${tool:"contrib/tools/protoc/plugins/grpc_java"} --grpc_java_out=$ARCADIA_BUILD_ROOT/java_out
    }

    when ("yes") {
        PROTO_SOURCE_INCLUDE=contrib/libs/protobuf/stubs/common.h contrib/libs/protobuf/generated_message_util.h contrib/libs/protobuf/repeated_field.h contrib/libs/protobuf/extension_set.h contrib/libs/protobuf/generated_message_reflection.h contrib/libs/protobuf/service.h contrib/libs/protobuf/messagext.h
        PROTO_HEADER_INCLUDE=contrib/libs/protobuf/stubs/once.h contrib/libs/protobuf/io/coded_stream.h contrib/libs/protobuf/wire_format_lite_inl.h contrib/libs/protobuf/descriptor.h contrib/libs/protobuf/reflection_ops.h contrib/libs/protobuf/wire_format.h contrib/libs/protobuf/ya_nulls.h
    }

    when ($GRPC_FLAG == "yes") {
        PROTO_HEADER_INCLUDE+=contrib/libs/grpc/include/grpc++/impl/codegen/async_stream.h contrib/libs/grpc/include/grpc++/impl/codegen/async_unary_call.h contrib/libs/grpc/include/grpc++/impl/codegen/method_handler_impl.h contrib/libs/grpc/include/grpc++/impl/codegen/proto_utils.h contrib/libs/grpc/include/grpc++/impl/codegen/rpc_method.h contrib/libs/grpc/include/grpc++/impl/codegen/service_type.h contrib/libs/grpc/include/grpc++/impl/codegen/status.h contrib/libs/grpc/include/grpc++/impl/codegen/stub_options.h contrib/libs/grpc/include/grpc++/impl/codegen/sync_stream.h
        PROTO_SOURCE_INCLUDE+=contrib/libs/grpc/include/grpc++/impl/codegen/async_stream.h contrib/libs/grpc/include/grpc++/impl/codegen/async_unary_call.h contrib/libs/grpc/include/grpc++/impl/codegen/channel_interface.h contrib/libs/grpc/include/grpc++/impl/codegen/client_unary_call.h contrib/libs/grpc/include/grpc++/impl/codegen/method_handler_impl.h contrib/libs/grpc/include/grpc++/impl/codegen/rpc_service_method.h contrib/libs/grpc/include/grpc++/impl/codegen/service_type.h contrib/libs/grpc/include/grpc++/impl/codegen/sync_stream.h
    }

    # XXX workaround DEVTOOLS-3278
    when ($GRPC_FLAG == "yes") {
        PROTOC=${tool:"contrib/tools/protoc"}
    }

    DEFAULT(PY_PROTOS_FOR no)

    when ($PY_PROTOS_FOR == "yes") {
        MACRO_ALIAS(EVLOG_CMD PY_EVLOG_CMD)
        MACRO_ALIAS(PROTO_CMD PY_PROTO_CMD)
    }
    otherwise {
        MACRO_ALIAS(EVLOG_CMD CPP_EVLOG_CMD)
        MACRO_ALIAS(PROTO_CMD CPP_PROTO_CMD)
    }

    SANITIZER_DEFINED=no

    when ($SANITIZER_TYPE && $SANITIZER_TYPE != "no" && $SANITIZER_TYPE != "pg") {
        CFLAGS+=-fsanitize=$SANITIZER_TYPE -D${SANITIZER_TYPE}_sanitizer_enabled -fsanitize-blacklist=${input:"build/sanitize-blacklist.txt"} $SANITIZER_CFLAGS
        LDFLAGS+=-fsanitize=$SANITIZER_TYPE -fsanitize-blacklist=${input:"build/sanitize-blacklist.txt"}
        SANITIZER_DEFINED=yes
    }

    when ($SANITIZE_COVERAGE && $SANITIZE_COVERAGE != "no") {
        CFLAGS+=-fsanitize-coverage=$SANITIZE_COVERAGE
        LDFLAGS+=-fsanitize-coverage=$SANITIZE_COVERAGE
    }

    when ($SANITIZER_TYPE && $SANITIZER_TYPE == "pg") {
        CFLAGS+=-fno-omit-frame-pointer -Dpg_sanitizer_enabled
    }

    when ($GCC) {
        select ($SANITIZER_TYPE) {
            "address" ? {
                LDFLAGS+=-static-libasan
            }
            "undefined" ? {
                LDFLAGS+=-static-libubsan
            }
            "thread" ? {
                LDFLAGS+=-pie -static-libtsan
            }
        }
    }

    when ($USE_LTO == "yes") {
        when ($GCC) {
            CFLAGS+=-flto -fno-fat-lto-objects
            LDFLAGS+=-flto
        }
        when ($CLANG) {
            CFLAGS+=-emit-llvm
            LDFLAGS+=-flto -fuse-ld=gold
        }
    }

    when ($CLANG) {
        when ($PGO_ADD == "yes") {
            CFLAGS+=-fprofile-instr-generate
            LDFLAGS+=-fprofile-instr-generate
        }
        when ($PGO_PATH) {
            CFLAGS+=-fprofile-instr-use=$PGO_PATH -Wno-profile-instr-unprofiled -Wno-profile-instr-out-of-date
            LDFLAGS+=-fprofile-instr-use=$PGO_PATH
        }
    }

    when ($COMPILER_PLATFORM && $NOPLATFORM != "yes") {
        PEERDIR+=$COMPILER_PLATFORM
    }

    when ($MUSL == "yes") {
        PEERDIR += contrib/libs/musl-1.1.16/full
    }

    # g++ has proxy C-headers which are incompatible with libc++ proxy C-headers.
    # The same problem exists for clang toolchain. On the other hand, the problem
    # doesn't affect cl since it has united C/C++ library and doesn't need
    # proxy C-headers.
    # Disable all C++ headers including proxy C-headers when we use libc++.
    when ($USE_INTERNAL_STL == "yes" && $MSVC != "yes") {
        CXXFLAGS += -nostdinc++
    }

    when ($MSVC == "yes" && $NO_WINDOWS_STRICT != "yes") {
        CFLAGS+=/DSTRICT
    }

    when ($MSVC == "yes" && $NO_WIN32_LEAN != "yes") {
        CFLAGS+=/DNOMINMAX /DWIN32_LEAN_AND_MEAN
    }

    DEFAULT(PACKAGE_PREFIX_ARGS)
}

module LINK_UNIT: BASE_UNIT {
    MODULE_PROP(EXTS .o .obj)
    MODULE_PROP(CMD LINK_EXE)
    MODULE_PROP(NODE_TYPE Program)
    MODULE_PROP(PEERDIR_POLICY as_build_from)

    DEFAULT(ALLOCATOR $DEFAULT_ALLOCATOR)

    #link with libunwind manually
    when ($DARWIN == "yes" && $NOPLATFORM != "yes") {
        PEERDIR += contrib/libs/cxxsupp/libcxxrt
    }

    when ($USE_LIBCXXRT == "yes") {
        PEERDIR += contrib/libs/cxxsupp/libcxxrt
    }

    when ($USE_MKL == "yes") {
        NOPLATFORM=yes
    }

    when (($USE_EAT_MY_DATA == "yes") && ($WIN32 != "yes") && ($DARWIN != "yes") && ($OS_ANDROID != "yes")) {
        PEERDIR+=contrib/libs/libeatmydata
    }

    when ($USE_ARCADIA_LIBM == "yes") {
        PEERDIR+=contrib/libs/libm
    }
    when ($USE_ARCADIA_LIBM == "no") {
        LINK_OPTIONS_END += -lm
    }

    when ($WITH_VALGRIND == "yes" || $SANITIZER_DEFINED == "yes") {
        when ($ALLOCATOR in [ "GOOGLE", "J", "LF", "LF_YT", "LF_DBG", "B", "BS" ]) {
            PEERDIR+=library/malloc/system
        }
    }
    otherwise {
        select ($ALLOCATOR) {
            "GOOGLE" ? {
                PEERDIR+=library/malloc/galloc
            }
            "J" ? {
                when ($WIN32 == "yes") {
                    PEERDIR+=library/malloc/system
                }
                otherwise {
                    PEERDIR+=library/malloc/jemalloc
                }
            }
            "LF" ? {
                PEERDIR+=library/lfalloc
            }
            "LF_YT" ? {
                PEERDIR+=library/lfalloc/yt
            }
            "LF_DBG" ? {
                PEERDIR+=library/lfalloc/dbg
            }
            "B" ? {
                PEERDIR+=library/balloc
            }
            "BS" ? {
                PEERDIR+=library/balloc/sanitize
            }
            "LOCKLESS" ? {
                PEERDIR+=library/malloc/lockless
            }
        }
    }

    when ($ALLOCATOR == "SYSTEM") {
        PEERDIR+=library/malloc/system
    }
    # TODO: fix WERROR and MSVC_WERROR macros
    when ($NO_COMPILER_WARNINGS != "yes" && $WERROR != "no") {
        when ($WERROR_MODE == "all" || ($WERROR_MODE == "compiler_specific" && $WERROR == "yes")) {
            CFLAGS+=$WERROR_FLAG
        }
    }

    when ($ICC == "yes") {
        PEERDIR+=contrib/libs/intel/core
    }
    when ($WITH_VALGRIND == "yes") {
        PEERDIR+=contrib/libs/valgrind
        LDFLAGS+=-fuse-ld=gold
    }
}

MODULE_TYPE=UNKNOWN

module PROGRAM: LINK_UNIT {
    MODULE_PROP(SYMLINK_POLICY EXE)
    SET(MODULE_TYPE PROGRAM)

    when ($WIN32 == "yes" || $OS_CYGWIN == "yes") {
        MODULE_SUFFIX=.exe
    }

    when ($MSVC != "yes" && $NOPLATFORM != "yes" && $WITH_VALGRIND != "yes" && $USE_ASMLIB != "no" && $MIC_ARCH != "yes") {
        PEERDIR+=contrib/libs/asmlib
    }

    when ($USE_ARC_PROFILE == "yes" && $NOUTIL != "yes") {
        PEERDIR += library/execprofile/autostart
    }

    when ($SANITIZER_DEFINED == "yes") {
        PEERDIR += contrib/libs/cxxsupp/libsan
    }
}

macro YCR_GENERATE_CONFIGS_INTL(Package, App, Configs...) {
    MACRO_PROP(CMD ${tool:"maps/tools/yacare/scripts/make_configs"} $Package $App ${cwd:BINDIR} ${output;hide;pre=debian/$Package/:Configs})
}

macro YCR_GENERATE_CONFIGS(Package, App) {
    MACRO_PROP(CMD $YCR_GENERATE_CONFIGS_INTL($Package $App ${pre=etc/yandex/maps/yacare/:App.conf} ${pre=etc/logrotate.d/:App} ${pre=etc/monrun/conf.d/:App.conf} ${pre=etc/nginx/sites-available/:App.conf} ${pre=etc/syslog-ng/conf-available/:App.conf} ${pre=usr/lib/yandex/maps/yacare/checks/:App} ${pre=usr/lib/yandex/maps/yacare/stat/:App}))
}

YCR_LINK_EXE=$LINK_EXE && $YCR_GENERATE_CONFIGS($REALPRJNAME $REALPRJNAME)

module YCR_PROGRAM: PROGRAM {
    MODULE_PROP(CMD YCR_LINK_EXE)
}

macro EXPORTS_SCRIPT(Arg) {
    SET(EXPORTS_FILE $Arg)
}

module TOOL: PROGRAM {
    STRIP()
    # DISABLE(SANITIZER_TYPE)
}

module UNITTEST: PROGRAM {
    MODULE_PROP(NODE_TYPE Test)
    PEERDIR(library/unittest/main)
    when ($UT_SKIP_EXCEPTIONS == "yes") {
        C_DEFINES+=-DUT_SKIP_EXCEPTIONS
    }
    ADD_YTEST($REALPRJNAME unittest.py)
}

USE_AFL=no

module FUZZ: PROGRAM {
    MODULE_PROP(NODE_TYPE Test)

    when ($USE_AFL == "no") {
        PEERDIR+=contrib/libs/libfuzzer
    }
    when ($USE_AFL == "yes") {
        PEERDIR+=contrib/libs/libfuzzer/afl
    }

    when (!$SANITIZER_TYPE || $SANITIZER_TYPE == "no") {
        PEERDIR+=devtools/nofuzz
    }

    ADD_YTEST($REALPRJNAME fuzz.test)
}

module BOOSTTEST: PROGRAM {
    MODULE_PROP(NODE_TYPE Test)
    PEERDIR(library/testing/ya_boost_test)
    ADD_YTEST($REALPRJNAME boost.test)
}

FUZZ_DICTS_VALUE=
macro FUZZ_DICTS(Data) {
    SET_APPEND(FUZZ_DICTS_VALUE $Data)
}

FUZZ_OPTS_VALUE=
macro FUZZ_OPTS(Data) {
    SET_APPEND(FUZZ_OPTS_VALUE $Data)
}

TEST_SRCS_VALUE=
macro TEST_SRCS(Tests) {
    SET(TEST_SRCS_VALUE $Tests)
}

TEST_DATA_VALUE=
macro DATA(Data) {
    SET_APPEND(TEST_DATA_VALUE $Data)
}

TEST_TAGS_VALUE=
macro TAG(Tags) {
    SET_APPEND(TEST_TAGS_VALUE $Tags)
}

TEST_REQUIREMENTS_VALUE=
macro REQUIREMENTS(Tags) {
    SET(TEST_REQUIREMENTS_VALUE $Tags)
}

TEST_DEPENDS_VALUE=
macro DEPENDS(Data) {
    SET_APPEND(TEST_DEPENDS_VALUE $Data)
}

TEST_PYTHON_PATH_VALUE=
macro PYTHON_PATH(Path) {
    SET(TEST_PYTHON_PATH_VALUE $Path)
}

SKIP_TEST_VALUE=
macro SKIP_TEST(Reason) {
    SET(SKIP_TEST_VALUE $Reason)
}

LINT_LEVEL_VALUE=base
macro NO_LINT() {
    SET(LINT_LEVEL_VALUE none)
}
macro LINT(level) {
    SET(LINT_LEVEL_VALUE $level)
}

module PYTEST_SCRIPT: BASE_UNIT {
    MODULE_PROP(NODE_TYPE Test)
    SET(MODULE_SUFFIX .pkg.fake)
    NO_PLATFORM()
    ADD_PYTEST_SCRIPT(PY_TEST)
}

module PYTEST_COMMON: PY_PROGRAM {
    MODULE_PROP(NODE_TYPE Test)
    when ($USE_ARCADIA_PYTHON == "yes") {
        PEERDIR+=library/python/pytest
    }
    when ($USE_ARCADIA_PYTHON == "no") {
        MODULE_SUFFIX=.pkg.fake
        PEERDIR+=library/python/pytest/empty
    }

    # XXX DEVTOOLS-3210
    when ($PYTHON_COVERAGE == "yes") {
        PEERDIR+=contrib/python/coverage
    }
}

module PYTEST_BIN: PYTEST_COMMON {
    MODULE_PROP(NODE_TYPE Test)
    SETUP_PYTEST_BIN()
}

module PYTEST: PYTEST_BIN {

}

module YQL_UDF_TEST: PYTEST {
    PEERDIR(yql/library/udf_test)
    DEPENDS(yql/tools/yqlrun)
    DATA(arcadia/yql/mount)
}

module EXECTEST: PYTEST_COMMON {
    MODULE_PROP(NODE_TYPE Test)
    PEERDIR(library/exectest)
    SETUP_EXECTEST()
}

module BENCHMARK: PROGRAM {
    PEERDIR(library/testing/benchmark/main)
}

TEST_ROOT=$(TESTS_DATA_ROOT)
RESULT_MAX_FILE=0
STRIP_FILES=--dont-strip-files
VERIFY_RESULTS=--verify-results
ADDITIONAL_PATH=

# set for tests variables to fill it by YA_DEV or YA
YA_ROOT=ya
when ($YA_DEV == "yes") {
    YA_ROOT=ya-dev
}

module UNITTEST_FOR: UNITTEST {
    PEERDIR(ADDINCL $UNITTEST_DIR)
    SRCDIR($UNITTEST_DIR)
}

module _LIBRARY: BASE_UNIT {
    MODULE_PROP(CMD LINK_LIB)
    MODULE_PROP(NODE_TYPE Library)
    MODULE_PROP(PEERDIR_POLICY as_include)
    MODULE_PROP(EXTS .o .obj .a)
    MODULE_PROP(ALLOWED GRPC)

    MODULE_PROP(ALLOWED EXTRALIBS OBJADDE_GLOBAL)
    MODULE_PROP(GLOBAL USER_CFLAGS USER_CXXFLAGS LDFLAGS SRCS)
    MODULE_PROP(RESTRICTED ALLOCATOR)
    #TODO: Remove this hack (really we do not need add fake src at all)
    ENABLE(NEED_ADD_FAKE_SRC)

    when ($USE_MKL == "yes") {
        NOPLATFORM=yes
    }

    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_PREFIX=
        MODULE_SUFFIX=.lib
    }
    otherwise {
        MODULE_PREFIX=lib
        MODULE_SUFFIX=.a
    }

    # TODO: fix WERROR and MSVC_WERROR macros
    when ($NO_COMPILER_WARNINGS != "yes" && $WERROR != "no") {
        when ($WERROR_MODE == "all" || ($WERROR_MODE == "compiler_specific" && $WERROR == "yes")) {
            CFLAGS+=$WERROR_FLAG
        }
    }

    when ($WITH_VALGRIND == "yes") {
        PEERDIR+=contrib/libs/valgrind
    }

    when ($USER_PREFIX) {
        MODULE_PREFIX=$USER_PREFIX
    }

    select ($SWIG_LANG) {
        "perl" | "java" ? {
            SWIG_INTERFACE=
        }
        "python" ? {
            SWIG_INTERFACE= -interface $MODULE_PREFIX$REALPRJNAME
        }
    }
    SET(SWIG_MODNAME $REALPRJNAME)

    when ($USE_ARCADIA_LIBM == "yes") {
        PEERDIR+=contrib/libs/libm
    }
}

module LIBRARY: _LIBRARY {
    when ($GRPC_FLAG == "yes") {
        PEERDIR+=contrib/libs/grpc
    }
}

module FAT_OBJECT: LIBRARY {
    MODULE_PROP(CMD LINK_FAT_OBJECT)
    MODULE_PROP(PEERDIR_POLICY as_build_from)
    SET(MODULE_SUFFIX .o)
}

LINK_ADD=

module DLL_UNIT: LINK_UNIT {
    MODULE_PROP(CMD LINK_DYN_LIB)
    MODULE_PROP(NODE_TYPE Library)
    MODULE_PROP(SYMLINK_POLICY SO)
    MODULE_PROP(ALLOWED EXTRALIBS OBJADDE_GLOBAL)
    MODULE_PROP(GLOBAL USER_CFLAGS USER_CXXFLAGS LDFLAGS)
    ALLOCATOR(FAKE)
    DEFAULT(MODULE_PREFIX lib)

    when ($WINDOWS == "yes") {
        MODULE_PREFIX=
    }

    when ($USER_PREFIX) {
        MODULE_PREFIX=$USER_PREFIX
    }

    select ($SWIG_LANG) {
        "perl" | "java" ? {
            SWIG_INTERFACE=
        }
        "python" ? {
            SWIG_INTERFACE= -interface $MODULE_PREFIX$REALPRJNAME
        }
    }

    SET(SWIG_MODNAME $REALPRJNAME)

    when ($LINUX == "yes") {
        # `-z notext' is needed for linking mkl into shared libraries
        LDFLAGS += -Wl,-z,notext
        LINK_ADD+=--fix-elf ${tool:"tools/fix_elf"}
    }

    when ($MODULE_VERSION) {
        LINK_ADD+=--soname ${output;noext:SONAME}
    }
}

module PYMODULE: DLL_UNIT {
    when ($MSVC != "yes" && $DARWIN != "yes") {
        LDFLAGS+= -Wl,-Bsymbolic
    }

    when ($USE_ARCADIA_PYTHON == "yes" && $MSVC == "yes" || $IS_CROSS_TOOLS == "yes") {
        PEERDIR+=contrib/tools/python/lib
    }

    when ($USE_ARCADIA_PYTHON == "no") {
        when ($USE_SYSTEM_PYTHON) {
            PEERDIR+=contrib/libs/platform/python
        }
        otherwise {
            when ($MSVC == "yes" || $CYGWIN == "yes") {
                LDFLAGS+=$PYTHON_LIBRARIES
            }
        }
    }

    # -bundle
    when ($DARWIN == "yes") {
        LDFLAGS+=-flat_namespace -undefined dynamic_lookup
    }

    PYTHON_ADDINCL()

    when ($USER_PREFIX) {
        MODULE_PREFIX=$USER_PREFIX
    }

    DEFAULT(MODULE_VERSION)

    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_PREFIX=lib
        MODULE_SUFFIX=.pyd$MODULE_VERSION
    }
    otherwise {
        MODULE_PREFIX=
        MODULE_SUFFIX=.so$MODULE_VERSION
    }
}

module R_MODULE: DLL_UNIT {
    when ($DARWIN == "yes") {
        LDFLAGS+=-flat_namespace -undefined dynamic_lookup
    }

    DEFAULT(MODULE_VERSION)

    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_PREFIX=lib
        MODULE_SUFFIX=.dll
    }
    otherwise {
        MODULE_SUFFIX=.so$MODULE_VERSION
    }

    ADDINCL(contrib/libs/r-lang)
}

module DLL: DLL_UNIT {
    SET(MAKE_ONLY_SHARED_LIB yes)

    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_SUFFIX=.dll
    }

    DEFAULT(MODULE_VERSION)

    when ($DARWIN == "yes") {
        MODULE_SUFFIX=.dylib$MODULE_VERSION
    }
    when ($MSVC != "yes" && $DARWIN != "yes" && $CYGWIN != "yes") {
        MODULE_SUFFIX=.so$MODULE_VERSION
    }

    # TODO: Make it possible to use this syntax
    # DEFAULT(DLL_FOR_DIR no)
    ### FIXME: XXX
    ###when ($DLL_FOR_DIR != "no") {
    ###    SRCDIR($DLL_FOR_DIR)
    ###    ADDINCL($DLL_FOR_DIR)
    ###}
}

module DLL_JAVA: DLL {
    MODULE_PROP(EXTS .o .obj .jsrc .java)
    MODULE_PROP(CMD SWIG_DLL_JAR_CMD)

    SET(SWIG_LANG java)
}

module UDF_BASE: DLL_UNIT  {
    PRINT_MODULE_TYPE(UDF $REALPRJNAME)

    when ($MSVC != "yes" && $DARWIN != "yes") {
        LDFLAGS+= -Wl,-Bsymbolic
    }

    DEFAULT(MODULE_PREFIX lib)

    when ($USER_PREFIX) {
        MODULE_PREFIX=$USER_PREFIX
    }

    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_SUFFIX=.dll
    }

    DEFAULT(MODULE_VERSION)

    when ($DARWIN == "yes") {
        MODULE_SUFFIX=.dylib$MODULE_VERSION
    }

    when ($MSVC != "yes" && $DARWIN != "yes" && $CYGWIN != "yes") {
        MODULE_SUFFIX=.so$MODULE_VERSION
    }
}

module UDF: UDF_BASE {
    PEERDIR(yweb/robot/kiwi/kwcalc/udflib)
}

module UDF_LIB: LIBRARY {
    PEERDIR(yweb/robot/kiwi/kwcalc/udflib)
}

module YQL_UDF: UDF_BASE {
    PEERDIR(yql/library/udf)
    PEERDIR(yql/library/udf/support)
    SET_APPEND(USER_CXXFLAGS -DBUILD_UDF)
    # For Windows using declspecs
    DEFAULT(YQL_UDF_EXPORT ${ARCADIA_ROOT}/yql/library/udf/udfs_exports.exports)

    when ($WINDOWS == "yes") {
        YQL_UDF_EXPORT=
    }

    SET(EXPORTS_FILE $YQL_UDF_EXPORT)
}

macro YQL_ABI_VERSION(Major, Minor, Patch) {
    YQL_ABI_FLAGS=-DUDF_ABI_VERSION_MAJOR=$Major -DUDF_ABI_VERSION_MINOR=$Minor -DUDF_ABI_VERSION_PATCH=$Patch
    SET_APPEND(USER_CXXFLAGS $YQL_ABI_FLAGS)
}

module YQL_PYTHON_UDF: YQL_UDF {
    MODULE_PROP(PROTO_POLICY PY_PROTO)
    DEFAULT(YQL_PYTHON_UDF_EXPORT ${ARCADIA_ROOT}/yql/udfs/common/python/python_udf/python_udfs_exports.exports)

    when ($WINDOWS == "yes") {
        YQL_PYTHON_UDF_EXPORT=
    }

    ### FIXME: XXX the statement below uncoditionally set EXPORTS_FILE (due to incorrect behaviour of old ConfReader
    ###when ($USE_ARCADIA_PYTHON == "yes") SET(EXPORTS_FILE $YQL_PYTHON_UDF_EXPORT)
    SET(EXPORTS_FILE $YQL_PYTHON_UDF_EXPORT)
}

# as SRCS in packages use macro BUNDLE_SRCS!

PACKED_PACKAGE_ARGS=
PACKED_PACKAGE_EXT=
macro PACK(Ext) {
    SET(PACKED_PACKAGE_EXT $Ext)
}

PACKAGE_STRICT_VALUE=
macro PACKAGE_STRICT() {
    SET(PACKAGE_STRICT_VALUE yes)
}

module PACKAGE: BASE_UNIT  {
    MODULE_PROP(PEERDIR_POLICY as_build_from)
    SET(MODULE_SUFFIX .pkg.fake)
    NO_PLATFORM()
    when ($PACKED_PACKAGE_EXT) {
        PACKED_PACKAGE_ARGS+=--dest-arch ${output;suf=.$PACKED_PACKAGE_EXT:REALPRJNAME}
    }
    MODULE_PROP(ALL_INS_TO_OUT yes)
    MODULE_PROP(CMD TOUCH_PACKAGE)
}

module TGZ_PACKAGE: UNION  {
    SET(MODULE_SUFFIX .tgz)
}

module UNION: BASE_UNIT {
    NO_PLATFORM()
    SET(MODULE_SUFFIX .pkg.fake)
    MODULE_PROP(ALL_INS_TO_OUT yes)
}

module PY_PACKAGE: UNION {
    MODULE_PROP(EXTS .py)
    MODULE_PROP(ALL_INS_TO_OUT yes)
}

module PROTO_LIBRARY: LIBRARY {
}

PY_NAMESPACE_VALUE=
macro PY_NAMESPACE(Arg) {
    SET(PY_NAMESPACE_VALUE $Arg)
}

module _JAVA_LIBRARY: BASE_UNIT {
    MODULE_PROP(EXTS .jsrc .java .jar)
    MODULE_PROP(NODE_TYPE Bundle)
    MODULE_PROP(CMD COMPILE_JAVA)
    MODULE_PROP(PEERDIR_POLICY as_build_from)
    MODULE_PROP(PROTO_POLICY JAVA_PROTO)

    when ("yes") {
        MACRO_ALIAS(PROTO_CMD JAVA_PROTO_CMD)
        MACRO_ALIAS(EVLOG_CMD JAVA_EVLOG_CMD)
    }

    when ($PACKAGE_PREFIX) {
        PACKAGE_PREFIX_ARGS=--package-prefix=$PACKAGE_PREFIX
    }

    NO_PLATFORM()
    SET(MODULE_SUFFIX .jar)
}

JAVA_PROTOBUF=contrib/java/com/google/protobuf/protobuf-java/3.2.0
JAVA_GRPC_STUB=contrib/java/io/grpc/grpc-stub/1.5.0
JAVA_GRPC_PROTOBUF=contrib/java/io/grpc/grpc-protobuf/1.5.0

module JAVA_PROTO_LIBRARY: _JAVA_LIBRARY {
    MODULE_PROP(EXTS .jsrc)
    MODULE_PROP(ALLOWED GRPC)
    PEERDIR($JAVA_PROTOBUF)
    when ($GRPC_FLAG == "yes") {
        PEERDIR+=$JAVA_GRPC_STUB $JAVA_GRPC_PROTOBUF
    }
}


module PY_LIBRARY: _LIBRARY {
    MODULE_PROP(PROTO_POLICY PY_PROTO)
    PYTHON_ADDINCL()
    when ($MSVC == "yes" || $CYGWIN == "yes") {
        MODULE_PREFIX=py
    }
    otherwise {
        MODULE_PREFIX=libpy
    }
}

module PY_PROGRAM: PROGRAM {
    MODULE_PROP(PROTO_POLICY PY_PROTO)

    when ($USE_ARCADIA_PYTHON == "yes") {
        PEERDIR+=library/python/runtime/main
    }

    ALLOCATOR(J)
    STRIP()

    when ($SANITIZER_TYPE && $SANITIZER_TYPE != "no") {
        NO_STRIP=yes
    }
}

JAVA_SWIG_DELIM=JAVA_SWIG_DELIM

COMPILE_JAVA=${cwd:ARCADIA_BUILD_ROOT} $YMAKE_PYTHON ${input:"build/scripts/compile_java.py"} --javac-bin $(JDK)/bin/javac --jar-bin $(JDK)/bin/jar $PACKAGE_PREFIX_ARGS --jar-output $TARGET --srcs-jar-output ${output;suf=-sources.jar:REALPRJNAME} $AUTO_INPUT DELIM $PEERS ${kv;hide:"p JV"} ${kv;hide:"pc light-blue"} ${kv;hide:"show_out"} ${kv;hide:"needs_resourceJDK"}
SWIG_DLL_JAR_CMD=${cwd:ARCADIA_BUILD_ROOT} $YMAKE_PYTHON ${input:"build/scripts/build_dll_and_java.py"} $JAVA_SWIG_DELIM $LINK_DYN_LIB $JAVA_SWIG_DELIM $COMPILE_JAVA $JAVA_SWIG_DELIM $AUTO_INPUT $JAVA_SWIG_DELIM $TARGET $JAVA_SWIG_DELIM ${output;suf=.jar:REALPRJNAME} $JAVA_SWIG_DELIM ${output;suf=-sources.jar:REALPRJNAME} $JAVA_SWIG_DELIM $ARCADIA_BUILD_ROOT


module METAQUERY: BASE_UNIT  {
    MODULE_PROP(ALL_INS_TO_OUT yes)
    PRINT_MODULE_TYPE(METAQUERY $REALPRJNAME)
}

ARGS_DELIM="MACRO_CALLS_DELIM"

SYSTEM_PROPERTIES_VALUE=
macro SYSTEM_PROPERTIES(Args) {
    SET_APPEND(SYSTEM_PROPERTIES_VALUE $Args)
}

JVM_ARGS_VALUE=
macro JVM_ARGS(Args) {
    SET_APPEND(JVM_ARGS_VALUE $Args)
}

CHECK_JAVA_DEPS_VALUE=
macro CHECK_JAVA_DEPS(Arg) {
    SET(CHECK_JAVA_DEPS_VALUE $Arg)
}

ERROR_PRONE_VALUE=
macro USE_ERROR_PRONE() {
    SET(ERROR_PRONE_VALUE yes)
}

TEST_CWD_VALUE=
macro TEST_CWD(Arg) {
    SET(TEST_CWD_VALUE $Arg)
}

ADD_WAR_VALUE=
macro ADD_WAR(Args...) {
    SET_APPEND(ADD_WAR_VALUE $ARGS_DELIM $Args)
}

IDEA_EXCLUDE_DIRS_VALUE=
macro IDEA_EXCLUDE_DIRS(Args...) {
    SET_APPEND(IDEA_EXCLUDE_DIRS_VALUE $Args)
}

JAVAC_FLAGS_VALUE=
macro JAVAC_FLAGS(Args...) {
    SET_APPEND(JAVAC_FLAGS_VALUE $ARGS_DELIM $Args)
}

ANNOTATION_PROCESSOR_VALUE=
macro ANNOTATION_PROCESSOR(Args...) {
    SET_APPEND(ANNOTATION_PROCESSOR_VALUE $ARGS_DELIM $Args)
}

EXCLUDE_VALUE=
macro EXCLUDE(Args...) {
    SET_APPEND(EXCLUDE_VALUE $ARGS_DELIM $Args)
}

JAVA_SRCS_VALUE=
macro JAVA_SRCS(Args...) {
    SET_APPEND(JAVA_SRCS_VALUE $ARGS_DELIM $Args)
}

JAVA_ADD_DLLS_VALUE=no
macro ADD_DLLS_TO_JAR() {
    SET(JAVA_ADD_DLLS_VALUE yes)
}

EXTERNAL_JAR_VALUE=
macro EXTERNAL_JAR(Args...) {
    SET_APPEND(EXTERNAL_JAR_VALUE $ARGS_DELIM $Args)
}

DEPENDENCY_MANAGEMENT_VALUE=
macro DEPENDENCY_MANAGEMENT(Args...) {
    SET_APPEND(DEPENDENCY_MANAGEMENT_VALUE $ARGS_DELIM $Args)
}

module JAVA_PLACEHOLDER: BASE_UNIT  {
    NO_PLATFORM()
    MODULE_PROP(CMD TOUCH_JAVA_UNIT)
    MODULE_PROP(PROTO_POLICY JAVA_PROTO)
    JAVA_MODULE()
}

module JAVA_PROGRAM: JAVA_PLACEHOLDER {
    SET(MODULE_TYPE JAVA_PROGRAM)
}

module JAVA_LIBRARY: JAVA_PLACEHOLDER {
    SET(MODULE_TYPE JAVA_LIBRARY)
}

module JTEST: JAVA_PLACEHOLDER {
    SET(MODULE_TYPE JTEST)
    DEPENDS(devtools/junit-runner devtools/jacoco-agent)
    JAVA_TEST()
}

module JTEST_FOR: JTEST {
    SET(MODULE_TYPE JTEST_FOR)
    INTERNAL_RECURSE($UNITTEST_DIR)
    SET(REALPRJNAME jtest)
    JAVA_TEST()
}

module SANDBOX_TASK: BASE_UNIT  {
    NO_PLATFORM()
    ALLOCATOR(FAKE)
}

macro PYTHON_ADDINCL() {
    when ($USE_ARCADIA_PYTHON == "yes") {
        ADDINCL+=contrib/tools/python/src/Include contrib/tools/python/src
    }
    otherwise {
        when ($USE_SYSTEM_PYTHON) {
            PEERDIR+=contrib/libs/platform/python
        }
        otherwise {
            CFLAGS+=$PYTHON_INCLUDE
        }
    }
}

macro USE_PYTHON() {
    PYTHON_ADDINCL()

    when ($USE_ARCADIA_PYTHON == "yes") {
        PEERDIR+=contrib/tools/python/lib
    }
    otherwise {
        CFLAGS+=$PYTHON_FLAGS
        LDFLAGS+=$PYTHON_LDFLAGS
        OBJADDE+=$PYTHON_LIBRARIES
    }
}

when (($PERLXS == "yes") || ($PERLXSCPP == "yes") || ($USE_PERL == "yes")) {
    PEERDIR+=contrib/libs/perl-core
}

macro USE_PERL_LIB() {
    PEERDIR(contrib/libs/perl-core)
}

macro ALLOCATOR(Alloc) {
     SET(ALLOCATOR $Alloc)
}

macro ADD_PERL_MODULE(Dir, Module) {
    PEERDIR($Dir)
    SET_APPEND(modules $Module)
}

#LINK_STATICALLY=yes

when ($MIC_ARCH == "yes") {
    CFLAGS+=-mmic
    LDFLAGS+=-mmic
}
when ($USE_OPENMP == "yes") {
    PEERDIR+=contrib/libs/openmp
}

when ($STRIP == "yes" && $NO_STRIP != "yes") {
    STRIP_FLAG=$LD_STRIP_FLAG
}

macro BYK_NAME(BykName) {
    SET(__byk_name ${tolower:BykName})
    SET(__byk_lister ${BINDIR}/${__byk_name}.list)
}

macro EXTRALIBS_STATIC(Args...) {
    LDFLAGS(-Wl,-Bstatic ${Args} -Wl,-Bdynamic)
}

macro ADD_COMPILABLE_BYK(Prefixes, MakeBykOptions...) {
    SET(__bykname_upper ${toupper:__byk_name})
    SET(__bykname_lower ${tolower:__byk_name})

    SET(__make_byk_lister ${BINDIR}/${__bykname_lower}.list)
    SET(__make_byk_current_zip ${BINDIR}/${__bykname_lower}.image.gz)
    SET(__make_byk_current_cpp ${BINDIR}/bykimage.${__bykname_lower}.cpp)

    RUN_PROGRAM(dict/tools/make_byk ${MakeBykOptions} ${__bykname_lower} ${Prefixes} ${__make_byk_lister} CWD ${BINDIR} IN ${__make_byk_lister} ${Prefixes} OUT ${__make_byk_current_zip})
    RUN_PROGRAM(dict/tools/byktocpp Byk${__byk_name} ${__make_byk_current_zip} ${__make_byk_current_cpp} IN ${__make_byk_current_zip} OUT ${__make_byk_current_cpp})
}

macro ADD_COMPILABLE_TRANSLATE(Dict, Name, MakeTransDictOptions...) {
     __translatename_lower=${tolower:Name}
     __translate_dict=${BINDIR}/transdict.${__translatename_lower}.cpp
     RUN_PROGRAM(dict/tools/maketransdict ${MakeTransDictOptions} ${Name} STDIN ${Dict} STDOUT ${__translate_dict})
}

macro ADD_COMPILABLE_TRANSLIT(TranslitTable, NGrams, Name, Options...) {
     __translitname_lower=${tolower:Name}
     __translit_table=${BINDIR}/translit_trie_${__translitname_lower}.cpp
     __untranslit_table=${BINDIR}/untranslit_trie_${__translitname_lower}.cpp
     __ngrams_table=${BINDIR}/ngr_arr_${__translitname_lower}.cpp
     __gentrie_dir=dict/tools/make_untranslit_trie

     RUN_PROGRAM(${__gentrie_dir} ${Options} ${__translitname_lower} STDIN ${TranslitTable} STDOUT ${__untranslit_table})
     RUN_PROGRAM(${__gentrie_dir} -i ${Options} ${__translitname_lower} STDIN ${TranslitTable} STDOUT ${__translit_table})
     RUN_PROGRAM(dict/tools/make_ngrams ${Options} ${__translitname_lower} STDIN ${NGrams} STDOUT ${__ngrams_table})
}

macro GENERATE_PY_PROTOS(FILES...) {
    foreach (FILE : $FILES) {
        [.*]=$PY_PROTO_CMD($FILE)
    }
}

macro COPY_FILE(File, Destination) {
    MACRO_PROP(CMD $COPY_CMD ${input:File} ${output;noauto:Destination} ${kv;hide:"p CP"} ${kv;hide:"pc light-cyan"})
}
macro BUNDLE_PROGRAM(Prog, Destination) {
    MACRO_PROP(CMD $MOVE_FILE ${tool:Prog} ${output:Destination} ${kv;hide:"p BN"} ${kv;hide:"pc light-cyan"})
}

macro TIMEOUT(Time) {
    SET(TEST_TIMEOUT $Time)
}

TEST_FORK_MODE=none

macro FORK_TESTS() {
    SET(TEST_FORK_MODE tests)
}

macro FORK_SUBTESTS() {
    SET(TEST_FORK_MODE subtests)
}

macro SPLIT_FACTOR(Factor) {
    SET(TEST_SPLIT_FACTOR $Factor)
}

FORK_TEST_FILES_MODE=off
macro FORK_TEST_FILES() {
    SET(FORK_TEST_FILES_MODE on)
}

TEST_SIZE_NAME=SMALL

macro SIZE(Type) {
    SET(TEST_SIZE_NAME $Type)
}

macro JOIN_SRCS(Out, Src...) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/gen_join_srcs.py"} ${output:Out} ${input;rootrel:Src} ${output_include;hide:Src} ${kv;hide:"p JS"} ${kv;hide:"pc magenta"})
    # SRCS($Src)
}

macro _SRC_S(SRC, OPTIONS...) {
    MACRO_PROP(CMD $GCCFILTER $C_COMPILER $TARGET_OPT -c -o ${output:SRC.o} ${input:SRC} ${pre=-I:INCLUDE} ${kv;hide:"p CC"} ${kv;hide:"pc light-green"} $COMPILER_ENV)
}

macro _SRC_mm(SRC, OPTIONS...) {
    MACRO_PROP(CMD $GCCFILTER $C_COMPILER -x objective-c++ -fobjc-arc -fobjc-abi-version=2 $TARGET_OPT -c -o ${output:SRC.o} ${input:SRC} $CXXFLAGS ${pre=-I:INCLUDE} ${kv;hide:"p CC"} ${kv;hide:"pc light-green"} $COMPILER_ENV)
}

macro _SRC_fml(SRC, OPTIONS...) {
    MACRO_PROP(CMD $FML_TOOL $CHECKFLAG -b -o ${output:SRC.inc} -T ${input:SRC} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"})
}

macro _SRC_fml2(SRC, OPTIONS...) {
    MACRO_PROP(CMD $FML_TOOL $CHECKFLAG -b -o ${output;noext:SRC.fml.inc} -2 -O ${output;noext:SRC.fml.cpp} -T ${input:SRC} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"})
}

macro _SRC_fml3(SRC, OPTIONS...) {
    MACRO_PROP(CMD $FML_TOOL $CHECKFLAG -b -o ${output;noext:SRC.fml.inc} -3 -O ${output;noext:SRC.fml.cpp} -L ${input;noext:SRC.list} -P ${noext:SRC} -T ${input:SRC} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"})
}

macro _SRC_sfdl(SRC, OPTIONS...) {
    MACRO_PROP(CMD $CXX_COMPILER $CXXFLAGS $SFDL_FLAG ${input:SRC} && ${tool:"tools/calcstaticopt"} -i ${tmp:SRC.tmp} -a $ARCADIA_ROOT ${output;stdout;noext;defext=.inc:SRC} ${kv;hide:"p SF"} ${kv;hide:"pc yellow"} $COMPILER_ENV)
}

macro _SRC_cu(SRC, OPTIONS...) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/compile_cuda.py"} $NVCC $NVCCOPTS -c ${input:SRC} -o ${output:SRC.o} --cflags $CFLAGS ${kv;hide:"p CC"} ${kv;hide:"pc light-green"})
    MACRO_PROP(PEERDIR contrib/libs/nvidia/cudalib)
}

macro _SRC_xs(SRC, OPTIONS...) {
    MACRO_PROP(CMD $PERL ${suf=/xsubpp:EXTUTILS} -typemap ${suf=/typemap:EXTUTILS} $PERLSUFFIX $XSUBPPFLAGS ${input:SRC} ${stdout;output:SRC.cpp} ${kv;hide:"p XS"} ${kv;hide:"pc yellow"})
}

macro _SRC_y(SRC, OPTIONS...) {
    # MACRO_PROP(CMD ${tool:"contrib/tools/byacc"} $BYACC_FLAGS ${noext;output:SRC.cpp} ${input:SRC} ${noext;hide;output;addincl:SRC.h} ${kv;hide:"p YC"} ${kv;hide:"pc light-green"})
    MACRO_PROP(CMD ${tool:"contrib/tools/bison/bison"} $BISON_FLAGS --m4=${tool:"contrib/tools/bison/m4"} -d -o ${noext;output:SRC.cpp} ${input:SRC} && $YMAKE_PYTHON ${input:"build/scripts/preprocess.py"} ${noext;output;addincl:SRC.h} ${kv;hide:"p YC"} ${kv;hide:"pc light-green"})
}

macro _SRC_gperf(SRC, OPTIONS...) {
    MACRO_PROP(CMD $RUN_NO_SANITIZE ${tool:"contrib/tools/gperf"} $GP_FLAGS ${pre=-Nin_;suf=_set;noallext:SRC} ${input:SRC} ${output;stdout;noext;defext=.gperf.cpp:SRC} ${kv;hide:"p GP"} ${kv;hide:"pc yellow"})
}

macro _SRC_rl(SRC, OPTIONS...) {
    MACRO_PROP(CMD $RUN_NO_SANITIZE ${tool:"contrib/tools/ragel5/ragel"} $RAGEL_FLAGS -o ${tmp:SRC.tmp} ${input:SRC} && $RUN_NO_SANITIZE ${tool:"contrib/tools/ragel5/rlgen-cd"} $RLGEN_FLAGS -o ${output;noext;defext=.cpp:SRC} ${tmp:SRC.tmp} ${kv;hide:"p R5"} ${kv;hide:"pc yellow"})
}

macro _SRC_asp(SRC, OPTIONS...) {
    MACRO_PROP(CMD $RUN_NO_SANITIZE ${tool:"tools/html2cpp"} ${input:SRC} ${output:SRC.cpp} ${kv;hide:"p HT"} ${kv;hide:"pc yellow"})
}

macro _SRC_rl6(SRC, OPTIONS...) {
    MACRO_PROP(CMD $RUN_NO_SANITIZE ${tool:"contrib/tools/ragel6"} $RAGEL6_FLAGS -I${ARCADIA_ROOT} -o ${output;noext;defext=.rl6.cpp:SRC} ${input:SRC} ${kv;hide:"p R6"} ${kv;hide:"pc yellow"})
}

macro _SRC_l(SRC, OPTIONS...) {
    MACRO_PROP(CMD ${tool:"contrib/tools/flex-old"} $LEX_FLAGS -o${output:SRC.cpp} ${output_include;hide:"util/system/compiler.h"} ${input:SRC} ${kv;hide:"p LX"} ${kv;hide:"pc yellow"})
    MACRO_PROP(ADDINCL contrib/tools/flex-old)
}

macro _SRC_pln(SRC, OPTIONS...) {
    MACRO_PROP(CMD $FML_TOOL -b -o ${output;pre=pln.;noext:SRC.cpp} -f ${input:SRC} ${kv;hide:"p FM"} ${kv;hide:"pc yellow"})
}

macro _SRC_xsyn(SRC, OPTIONS...) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"library/xml/parslib/xsyn2ragel.py"} ${input:SRC} ${input:"library/xml/parslib/xmlpars.xh"} dontuse ${output;stdout:SRC.h.rl5} ${kv;hide:"p XN"} ${kv;hide:"pc yellow"})
}

macro _SRC_ev(SRC, OPTIONS...) {
    MACRO_PROP(CMD $EVLOG_CMD($SRC))
}

macro _SRC_proto(SRC, OPTIONS...) {
    MACRO_PROP(CMD $PROTO_CMD($SRC))
}

macro _SRC_gztproto(SRC, OPTIONS...) {
    # PROTO_PATH is before ARCADIA_ROOT in includes because in gazetteer we don't use builtins now and paths'canonization (resolving) depends on order of roots.
    # descriptor.proto must be resolved as google/protobuf/descriptor.proto
    MACRO_PROP(CMD ${tool:"dict/gazetteer/compiler"} -p -I$PROTO_PATH -I$ARCADIA_ROOT ${input:SRC} ${output;noext:SRC.proto} ${kv;hide:"p GZ"} ${kv;hide:"pc yellow"})
    MACRO_PROP(PEERDIR kernel/gazetteer)
}

macro _SRC_pyx(SRC, OPTIONS...) {
    # Copy-paste from BUILDWITH_CYTHON
    MACRO_PROP(CMD $YMAKE_PYTHON $CYTHON_SCRIPT --cplus -I$ARCADIA_ROOT ${input:SRC} -o ${output;tobindir:SRC.cpp} $CYTHON_OUTPUT_INCLUDES ${kv;hide:"p CY"} ${kv;hide:"pc yellow"})
    MACRO_PROP(ADDINCL contrib/tools/cython/Cython/Includes)
}

macro _SRC_in(SRC, OPTIONS...) {
   MACRO_PROP(CMD $CONFIGURE_FILE(${SRC} ${noext:SRC}))
}

macro _SRC_sc(SRC, OPTIONS...) {
    MACRO_PROP(CMD ${tool:"tools/domschemec"} --in ${input:SRC} --out ${output:SRC.h} ${output_include;hide:"util/generic/strbuf.h"} ${output_include;hide:"util/generic/string.h"} ${output_include;hide:"util/generic/vector.h"} ${output_include;hide:"util/string/cast.h"} ${kv;hide:"p SC"} ${kv;hide:"pc yellow"})
}

macro _SRC_external(SRC, OPTIONS...) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/fetch_from_external.py"} ${input:SRC} ${output;noext:SRC} ${kv;hide:"p CC"} ${kv;hide:"pc light-green"})
}

macro _SRC_f(SRC, OPTIONS...) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/f2c.py"} -t ${tool:"contrib/tools/f2c"} -c ${input:SRC} -o ${output:SRC.c} ${kv;hide:"p FT"} ${kv;hide:"pc light-green"})
    MACRO_PROP(PEERDIR contrib/libs/libf2c)
    MACRO_PROP(ADDINCL contrib/libs/libf2c)
}

macro SRCS(FILES...) {
    foreach (FILE : $FILES) {
        #_SRC(${lastext:FILE} $FILE)
        [.S, .s]               =$_SRC_S($FILE)
        [.mm]                  =$_SRC_mm($FILE)
        [.fml]                 =$_SRC_fml($FILE)
        [.fml2]                =$_SRC_fml2($FILE)
        [.fml3]                =$_SRC_fml3($FILE)
        [.sfdl]                =$_SRC_sfdl($FILE)
        [.cu]                  =$_SRC_cu($FILE)
        [.xs]                  =$_SRC_xs($FILE)
        [.y, .ypp]             =$_SRC_y($FILE)
        [.gperf]               =$_SRC_gperf($FILE)
        [.rl, .rl5]            =$_SRC_rl($FILE)
        [.asp]                 =$_SRC_asp($FILE)
        [.rl6]                 =$_SRC_rl6($FILE)
        [.l, .lex, .lpp]       =$_SRC_l($FILE)
        [.pln]                 =$_SRC_pln($FILE)
        [.xsyn]                =$_SRC_xsyn($FILE)
        [.ev]                  =$_SRC_ev($FILE)
        [.proto]               =$_SRC_proto($FILE)
        [.gztproto]            =$_SRC_gztproto($FILE)
        [.in]                  =$_SRC_in($FILE)
        [.pyx]                 =$_SRC_pyx($FILE)
        [.sc]                  =$_SRC_sc($FILE)
        [.external]            =$_SRC_external($FILE)
        [.f]                   =$_SRC_f($FILE)
        [.cxx, .cpp, .cc, .C]  =$_SRC_cpp($FILE)
        [.c]                   =$_SRC_c($FILE)
        [.m]                   =$_SRC_m($FILE)
        [.masm]                =$_SRC_masm($FILE)
    }
}

# TODO: use it in [.pyx] cmd
macro BUILDWITH_CYTHON_CPP(Src, Options...) {
    MACRO_PROP(CMD $YMAKE_PYTHON $CYTHON_SCRIPT ${Options} --cplus -I$ARCADIA_ROOT ${input:Src} -o ${output;tobindir:Src.cpp} $CYTHON_OUTPUT_INCLUDES ${kv;hide:"p CY"} ${kv;hide:"pc yellow"})
    ADDINCL(contrib/tools/cython/Cython/Includes)
}

macro BUILDWITH_CYTHON_C(Src, Options...) {
    MACRO_PROP(CMD $YMAKE_PYTHON $CYTHON_SCRIPT ${Options} -I$ARCADIA_ROOT ${input:Src} -o ${output;tobindir:Src.c} $CYTHON_OUTPUT_INCLUDES ${kv;hide:"p CY"} ${kv;hide:"pc yellow"})
    ADDINCL(contrib/tools/cython/Cython/Includes)
}

macro BUILDWITH_RAGEL6(Src, Options...) {
    MACRO_PROP(CMD $RUN_NO_SANITIZE ${tool:"contrib/tools/ragel6"} $RAGEL6_FLAGS ${Options} -I${ARCADIA_ROOT} -o ${output;noext;defext=.rl6.cpp:Src} ${input:Src} ${kv;hide:"p R6"} ${kv;hide:"pc yellow"})
}

# TODO: use it in [.pyx] cmd
macro _PY_REGISTER(Func) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/gen_py_reg.py"} $Func ${output;noauto:Func.reg.cpp} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"})
    SRCS(GLOBAL $Func.reg.cpp)
}

macro PY_COMPILE_BYTECODE(SrcX, Src) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/py_compile.py"} $SrcX ${input:Src} ${output;noauto:Src.yapyc} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"})
}

macro ARCHIVE_ASM(NAME="", DONTCOMPRESS?"-p":"", Files...) {
    MACRO_PROP(CMD $ARCH_TOOL -q $DONTCOMPRESS ${input;join=\: :Files}: -o ${output;chksum;suf=.rodata:NAME} ${kv;hide:"p AR"} ${kv;hide:"pc light-cyan"})
}

macro PIRE_INLINE_CMD(SRC) {
   MACRO_PROP(CMD ${tool:"library/regex/pire/inline"} -o ${output:SRC} ${input:SRC} ${output_include;hide:SRC} ${kv;hide:"p PI"} ${kv;hide:"pc yellow"})
}

macro PIRE_INLINE(FILES...) {
    foreach (FILE : $FILES) {
        [.*]=$PIRE_INLINE_CMD($FILE)
    }
}

macro ARCHIVE(NAME="", DONTCOMPRESS?"-p":"", Files...) {
    MACRO_PROP(CMD $ARCH_TOOL -q -x $DONTCOMPRESS ${input;join=\: :Files}: -o ${output;chksum;addincl;noauto:NAME} ${kv;hide:"p AR"} ${kv;hide:"pc light-red"})
}

macro ARCHIVE_BY_KEYS(NAME="", KEYS="", DONTCOMPRESS?"-p":"", Files...) {
    MACRO_PROP(CMD $ARCH_TOOL -q -x $DONTCOMPRESS ${input:Files} -k $KEYS -o ${output;chksum;addincl;noauto:NAME} ${kv;hide:"p AR"} ${kv;hide:"pc light-red"})
}

#scripts

BUILD_MN_SCRIPT=build/scripts/build_mn.py
macro BUILD_MN_SCRIPT() {
    MACRO_PROP(INCLUDE_CPP yes)
}

#special commands
SVNVERSION_SCRIPT=build/scripts/svn_version_gen.py
BUILDVERSION_SCRIPT=build/scripts/build_info_gen.py
SVNVERSION_JAVA_MARKER=output-java-class

macro CREATE_SVNVERSION_FOR(Unused, GenHdr) {
    MACRO_PROP(CMD $YIELD $ARCADIA_ROOT && $YIELD $ARCADIA_BUILD_ROOT && $YIELD ${quo:YMAKE_PYTHON} && $XARGS $YMAKE_PYTHON ${input:SVNVERSION_SCRIPT} ${output;chksum:GenHdr} $SVN_DEPENDS ${kv;hide:"p SV"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"})
}

macro CREATE_JAVA_SVNVERSION_FOR(GenHdr) {
    MACRO_PROP(CMD $YIELD $SVNVERSION_JAVA_MARKER && $YIELD $ARCADIA_ROOT && $YIELD $ARCADIA_BUILD_ROOT && $YIELD ${quo:YMAKE_PYTHON} && $XARGS $YMAKE_PYTHON ${input:SVNVERSION_SCRIPT} ${output;chksum:GenHdr} $SVN_DEPENDS ${kv;hide:"p SV"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"})
}

macro CREATE_BUILDINFO_FOR(GenHdr) {
    MACRO_PROP(CMD $YIELD $CXX_COMPILER && $YIELD $CXXFLAGS && $XARGS $YMAKE_PYTHON ${input:BUILDVERSION_SCRIPT} ${output:GenHdr} ${kv;hide:"p BI"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"})
}

LAST_CHANGED_REV_SCRIPT=build/scripts/last_changed_rev.py
LAST_CHANGED_REV_FIXED=

macro LAST_CHANGED_REV(Hdr, Opts...) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:LAST_CHANGED_REV_SCRIPT} --python-path=${quo:YMAKE_PYTHON} --fixed-rev=${LAST_CHANGED_REV_FIXED} --source-root=$ARCADIA_ROOT $Opts ${output;stdout;chksum:Hdr} ${kv;hide:"p SV"} ${kv;hide:"pc yellow"} ${hide;kv:"show_out"} $SVN_DEPENDS)
}

macro CONFIGURE_FILE(Src, Dst) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/configure_file.py"} ${input:Src} ${output;addincl:Dst} $CFG_VARS ${kv;hide:"p CF"} ${kv;hide:"pc yellow"})
}

macro CFG_VARS() {
    MACRO_PROP(GEN_FROM_FILE yes)
}

macro BASE_CODEGEN(Tool, Prefix, Opts...) {
    MACRO_PROP(CMD ${tool:Tool} ${input:Prefix.in} ${output;nopath;noauto:Prefix.cpp} ${output;nopath:Prefix.h} $Opts ${kv;hide:"p BC"} ${kv;hide:"pc yellow"})
}

macro SPLIT_CODEGEN_BASE(Tool, Prefix, OUT[], OPTS[], OUTPUT_INCLUDES[]) {
    MACRO_PROP(CMD ${tool:Tool} ${input:Prefix.in} ${output;hide:OUT} ${output;nopath;noauto:Prefix.cpp} ${output;nopath:Prefix.h} $OPTS ${output_include;hide:OUTPUT_INCLUDES} ${kv;hide:"p SC"} ${kv;hide:"pc yellow"})
}

macro STRUCT_CODEGEN(Prefix) {
    MACRO_PROP(CMD $BASE_CODEGEN(kernel/struct_codegen/codegen_tool, $Prefix))
    MACRO_PROP(SRC .proto)
    MACRO_PROP(INCLUDE kernel/struct_codegen/codegen_tool/main.cpp)
    MACRO_PROP(PEERDIR kernel/struct_codegen/metadata)
    MACRO_PROP(PEERDIR kernel/struct_codegen/reflection)
}

macro DUMPERF_CODEGEN(Prefix) {
    MACRO_PROP(CMD $BASE_CODEGEN(extsearch/images/robot/tools/dumperf/codegen, $Prefix, ${output_include;hide:"extsearch/images/kernel/erf/erf_format.h"}))
}

macro CFLAGS(Flags...) {
   SET_APPEND_WITH_GLOBAL(USER_CFLAGS $Flags)
}

macro MASMFLAGS(Flags...) {
   SET_APPEND(MASMFLAGS $Flags)
}

macro CONLYFLAGS(Flags...) {
   SET_APPEND_WITH_GLOBAL(USER_CONLYFLAGS $Flags)
}

macro CXXFLAGS(Flags...) {
   SET_APPEND_WITH_GLOBAL(USER_CXXFLAGS $Flags)
}

macro CUDA_NVCC_FLAGS(Flags...) {
   SET_APPEND(CUDA_NVCC_FLAGS $Flags)
   ENABLE(USE_CUDA)
}

macro STRIP() {
    ENABLE(STRIP)
}

macro NO_OPTIMIZE() {
    ENABLE(NO_OPTIMIZE)
}

macro NO_COMPILER_WARNINGS() {
    ENABLE(NO_COMPILER_WARNINGS)
    ENABLE(NO_WSHADOW)
}

macro WERROR() {
    # TODO: fix WERROR and MSVC_WERROR macros
    # when ($MSVC != "yes") ENABLE(WERROR)
    ENABLE(WERROR)
}

macro NO_WERROR() {
    DISABLE(WERROR)
}

macro NO_WSHADOW() {
    ENABLE(NO_WSHADOW)
}

macro NO_UTIL() {
    ENABLE(NOUTIL)
}

macro NO_RUNTIME() {
    SET(USE_ARCADIA_LIBM no)
    NO_UTIL()
    ENABLE(NORUNTIME)
}

macro NO_PLATFORM() {
    NO_LIBC()
    ENABLE(NOPLATFORM)
}

macro NO_LIBC() {
    NO_RUNTIME()
    ENABLE(NOLIBC)
    DISABLE(MUSL)
}

macro NO_JOIN_SRC() {
    ENABLE(NOJOINSRC)
}

macro NO_SANITIZE() {
    DISABLE(SANITIZER_TYPE)
}

macro NO_SANITIZE_COVERAGE() {
    DISABLE(SANITIZE_COVERAGE)
}

macro JOINSRC() {
    ENABLE(JOINSRC)
}

LUAJIT_PATH=$ARCADIA_ROOT/contrib/libs/luajit/
macro LUAJIT_OBJDUMP(Src, OUT="") {
   MACRO_PROP(CMD ${cwd:LUAJIT_PATH} ${tool:"contrib/libs/luajit/compiler"} -b -g ${input:Src} ${output;noauto:OUT} ${kv;hide:"p LJ"} ${kv;hide:"pc light-cyan"})
}

macro MX_BIN_TO_INFO(Src) {
    MACRO_PROP(CMD ${tool:"tools/mx_bin2info"} ${input:Src} ${output;noext;noauto:Src.info} ${kv;hide:"p MX"} ${kv;hide:"pc yellow"})
}

MX_GEN_TABLE_INCLS=${output_include;hide:"yabs_mx_calc_table.h"} \
${output_include;hide:"kernel/matrixnet/mn_sse.h"} \
${output_include;hide:"library/archive/yarchive.h"} \
${output_include;hide:"util/memory/blob.h"} \
${output_include;hide:"util/generic/hash.h"} \
${output_include;hide:"util/generic/ptr.h"} \
${output_include;hide:"util/generic/singleton.h"}

macro MX_GEN_TABLE(Srcs...) {
   MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/gen_mx_table.py"} $Srcs ${output;stdout:"mx_tables.cpp"} $MX_GEN_TABLE_INCLS ${kv;hide:"p MX"} ${kv;hide:"pc yellow"})
   PEERDIR(kernel/matrixnet)
   PEERDIR(library/archive)
}

RELEV_FML_CODEGEN_INCLS=${output_include;hide:"kernel/relevfml/relev_fml.h"} ${output_include;hide:"library/sse2neon/sse_adhoc.h"}

macro GENERATE_ENUM_SERIALIZATION(File) {
    MACRO_PROP(CMD $ENUM_PARSER_TOOL ${input:File} --include-path ${input;rootrel:File} --output ${output;chksum;suf=_serialized.cpp:File} ${output_include;hide:File} ${output_include;hide:"util/generic/serialized_enum.h"} ${kv;hide:"p EN"} ${kv;hide:"pc yellow"})
}

macro GENERATE_ENUM_SERIALIZATION_WITH_HEADER(File) {
    MACRO_PROP(CMD $ENUM_PARSER_TOOL ${input:File} --include-path ${input;rootrel:File} --output ${output;chksum;suf=_serialized.cpp:File} --header ${output;chksum;suf=_serialized.h:File} ${output_include;hide:File} ${kv;hide:"p EN"} ${kv;hide:"pc yellow"})
}

macro DEB_VERSION(File) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/mkver.py"} ${input:File} ${output;stdout:"DebianVersion.h"} ${kv;hide:"p CL"} ${kv;hide:"pc yellow"})
}

macro BUILD_MN(MnInfo, MnName, CHECK?"fml_tool=$FML_UNUSED_TOOL CHECK":"", MULTI?, PTR?, RANKING_SUFFIX="") {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnF $ARCADIA_ROOT $ARCH_TOOL ${input:MnInfo} $MnName ranking_suffix=$RANKING_SUFFIX ${output;chksum;pre=mn.:MnName.cpp} ${output;hide;pre=MN_External_;suf=.rodata:MnName} ${output_include;hide:"kernel/matrixnet/mn_sse.h"} $CHECK $MULTI $PTR ${kv;hide:"p MN"} ${kv;hide:"pc yellow"})
}

macro BUILD_MNS_FILE(Input, Name, Output, Suffix, Check, Fml_tool, AsmDataName) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnsFilesF $ARCADIA_ROOT $BINDIR $ARCH_TOOL fml_tool=$Fml_tool $Name ranking_suffix=$Suffix ${input:Input} ${output;hide:Output} ${output;hide;pre=MN_External_;suf=.rodata:AsmDataName} ${output_include;hide:"kernel/matrixnet/mn_sse.h"} ${kv;hide:"p MN"} ${kv;hide:"pc yellow"})
}

MNS_OUTPUT=mnmodels

macro BUILD_MNS_CPP(NAME="", CHECK?, RANKING_SUFFIX="", Files...) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnsCppF $NAME ranking_suffix=$RANKING_SUFFIX ${input:MNS_OUTPUT.h} ${output:MNS_OUTPUT.cpp} ${input:Files} ${output_include;hide:MNS_OUTPUT.h} ${kv;hide:"p MN"} ${kv;hide:"pc yellow"})
}

macro BUILD_MNS_HEADER(NAME="", CHECK?, RANKING_SUFFIX="", Files...) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:BUILD_MN_SCRIPT} BuildMnsHeaderF $NAME ranking_suffix=$RANKING_SUFFIX ${output:MNS_OUTPUT.h} ${input:Files} ${output_include;hide:"kernel/matrixnet/mn_sse.h"} ${output_include;hide:"kernel/matrixnet/mn_multi_categ.h"} ${kv;hide:"p MN"} ${kv;hide:"pc yellow"})
}

# TODO: support foreach_in and keywords simultaneous usage (look at BUILD_MNS_FILES)

macro BUILD_MNS(Files...) {
    BUILD_MNS_HEADER($Files)
    BUILD_MNS_CPP($Files)
    BUILD_MNS_FILES($Files)
}

macro NEED_REVIEW(Flags...) {
    # TODO: FIXME
    ENABLE(UNUSED_MACRO)
}

macro LICENSE(Flags...) {
    ENABLE(UNUSED_MACRO)
}

macro VERSION(Flags...) {
    ENABLE(UNUSED_MACRO)
}

macro BUILD_PLNS(Src...) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/build_pln_header.py"} ${output:"plnmodels.h"} ${input:Src} $RELEV_FML_CODEGEN_INCLS ${kv;hide:"p PN"} ${kv;hide:"pc yellow"})
    MACRO_PROP(PEERDIR kernel/relevfml library/sse2neon)
}

DATAWORK_SCHEEME_EXPORT_FLAGS=

when ($UNIX == "yes") {
    SCHEEME2_CFLAGS= -E -x c++
}

when ($WIN32 == "yes") {
    SCHEEME2_CFLAGS= /E /TP
}

SCHEEME2_STRUCT_INFO_FLAGS=-f "const static ui32 RecordSig" -u "RecordSig" --gcc44_no_typename --no_complex_overloaded_func_export
macro GEN_SCHEEME2(ScheemeName, FromFile) {
    MACRO_PROP(CMD $GCCFILTER $CXX_COMPILER -c ${tmp;stdout:FromFile.cph} $SCHEEME2_CFLAGS ${input:FromFile} ${pre=-I:INCLUDE} $CXXFLAGS -Wno-error && ${tool:"tools/structparser"} -o ${output:ScheemeName.inc} -n N${ScheemeName}SchemeInfo $SCHEEME2_STRUCT_INFO_FLAGS $DATAWORK_SCHEEME_EXPORT_FLAGS ${tmp:FromFile.cph} ${output;stdout;noauto:ScheemeName.inc.log} ${kv;hide:"p SH"} ${kv;hide:"pc yellow"})
}

macro SYMLINK(From, To) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/symlink.py"} ${input;dirallowed:From} ${output;noauto:To} ${kv;hide:"p LN"} ${kv;hide:"pc light-cyan"})
}

macro SCRIPT(Tool, ScriptPath, IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], TOOL{tool}[], OUTPUT_INCLUDES[], IN_DEPS[], STDOUT="", STDIN="", CWD="", Args...) {
    MACRO_PROP(CMD ${cwd:CWD} ${tool:Tool} ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p SC"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"})
}

macro LUA(ScriptPath, IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], TOOL{tool}[], OUTPUT_INCLUDES[], IN_DEPS[], STDOUT="", STDIN="", CWD="", Args...) {
    MACRO_PROP(CMD ${cwd:CWD} $LUA_TOOL ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p LU"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"})
}

macro PYTHON(ScriptPath, IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], TOOL{tool}[], OUTPUT_INCLUDES[], IN_DEPS[], STDOUT="", STDIN="", CWD="", Args...) {
    MACRO_PROP(CMD ${cwd:CWD} $PYTHON_BS_TOOL ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"})
}

macro BUILTIN_PYTHON(ScriptPath, IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], TOOL{tool}[], OUTPUT_INCLUDES[], IN_DEPS[], STDOUT="", STDIN="", CWD="", Args...) {
    MACRO_PROP(CMD ${cwd:CWD} $YMAKE_PYTHON ${input:ScriptPath} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p PY"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"})
}

macro SETUP_FROM_SANDBOX(Id, OUT{output}[], OUT_NOAUTO{output}[], OUTPUT_INCLUDES[], FILE?"--copy-to-dir":"--untar-to", Args...) {
    MACRO_PROP(CMD ${cwd:BINDIR} $YMAKE_PYTHON  ${input:"build/scripts/fetch_from_sandbox.py"} --resource-id $Id $FILE . ${output_include;hide:OUTPUT_INCLUDES} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${kv;hide:"p SB"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"})
}

macro RUN_JAVA(IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], OUTPUT_INCLUDES[], STDOUT="", STDIN="", CWD="", HIDE_OUTPUT?"stderr2stdout":"stdout2stderr", Args...) {
#    when ($HIDE_OUTPUT == "yes") {
#        __HIDE_OUTPUT=build/scripts/stderr2stdout.py
#    }
#    otherwise {
#        __HIDE_OUTPUT=build/scripts/stdout2stderr.py
#    }
#    IFTHENELSE(__HIDE_OUTPUT $HIDE_OUTPUT build/scripts/stderr2stdout.py build/scripts/stdout2stderr.py)
#    SET(__HIDE_OUTPUT $_HIDE_OUTPUT)
    MACRO_PROP(CMD ${cwd:CWD} $YMAKE_PYTHON ${input;pre=build/scripts/:HIDE_OUTPUT.py} $(JDK)/bin/java $Args ${input;hide:IN} ${output_include;hide:OUTPUT_INCLUDES} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p JV"} ${kv;hide:"pc light-blue"} ${kv;hide:"show_out"} ${kv;hide:"needs_resourceJDK"})
}

macro RUN_PROGRAM(Tool, IN{input}[], OUT{output}[], OUT_NOAUTO{output}[], TOOL{tool}[], OUTPUT_INCLUDES[], IN_DEPS[], STDOUT="", STDIN="", CWD="", Args...) {
    MACRO_PROP(CMD ${cwd:CWD} ${tool:Tool} $Args ${input;hide:IN} ${input;hide:IN_DEPS} ${output_include;hide:OUTPUT_INCLUDES} ${tool;hide:TOOL} ${output;hide:OUT} ${output;noauto;hide:OUT_NOAUTO} ${stdin;input:STDIN} ${output;stdout:STDOUT} ${kv;hide:"p PR"} ${kv;hide:"pc yellow"} ${kv;hide:"show_out"})
}

C_AS_CXX_FLAGS=-x c++ -std=c++14

macro COMPILE_C_AS_CXX() {
    SET(EXTRA_C_FLAGS $C_AS_CXX_FLAGS)
}

macro NO_DEBUG_INFO() {
    SET(NO_DEBUGINFO yes)
}

macro IMPORT_YMAPS_PROTO() {
     YMAPS_PROTO_ROOT=maps/doc/proto
     YMAPS_PROTOC_INCLUDE=-I=$ARCADIA_ROOT/$YMAPS_PROTO_ROOT
     SET_APPEND(PROTO_PATH $YMAPS_PROTOC_INCLUDE)
     ADDINCL($YMAPS_PROTO_ROOT)
     ADDINCL(GLOBAL ${ARCADIA_BUILD_ROOT}/$YMAPS_PROTO_ROOT)
}

macro EXPORT_YMAPS_PROTO() {
    SET(PROTO_NAMESPACE maps/doc/proto)
    IMPORT_YMAPS_PROTO()
}

macro YMAPS_GENERATE_SPROTO_HEADER(File) {
    MACRO_PROP(CMD ${cwd;rootdir;input:File} ${tool:"maps/libs/sproto/sprotoc"} -I=./$PROTO_NAMESPACE -I=$ARCADIA_ROOT/$PROTO_NAMESPACE -I=$ARCADIA_BUILD_ROOT -I=$PROTO_PATH --sproto_out=$ARCADIA_BUILD_ROOT/$PROTO_NAMESPACE ${input;rootrel:File} ${output;hide;norel;noext:File.sproto.h} ${kv;hide:"p PB"} ${kv;hide:"pc yellow"})
    MACRO_PROP(PEERDIR maps/libs/sproto)
}

macro YMAPS_SPROTO(FILES...) {
    foreach (FILE : $FILES) {
        [.proto]=$YMAPS_GENERATE_SPROTO_HEADER($FILE)
    }
}

macro CTEMPLATE_VARNAMES(File) {
    MACRO_PROP(CMD ${tool:"contrib/libs/ctemplate/make_tpl_varnames_h"} -f ${output;addincl;noallext:File.varnames.h} ${input:File})
}

LLVM_OPTS=
CLANG_ROOT=$(CLANG37)

macro LLVM_COMPILE_CXX(Input, Output, Opts...) {
    PEERDIR(contrib/libs/clang)
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/clang_wrapper.py"} $GCCFILTER $CLANG_ROOT/bin/clang++ ${pre=-I:INCLUDE} $CXXFLAGS $LLVM_OPTS -emit-llvm -c ${input:Input} -o ${output;noauto:Output} $Opts ${kv;hide:"p BC"} ${kv;hide:"pc light-green"})
}

macro LLVM_COMPILE_C(Input, Output, Opts...) {
    PEERDIR(contrib/libs/clang)
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/clang_wrapper.py"} $GCCFILTER $CLANG_ROOT/bin/clang ${pre=-I:INCLUDE} $CFLAGS $LLVM_OPTS -emit-llvm -c ${input:Input} -o ${output;noauto:Output} $Opts ${kv;hide:"p BC"} ${kv;hide:"pc light-green"})
}

macro LLVM_LINK(Output, Inputs...) {
    PEERDIR(contrib/libs/clang)
    MACRO_PROP(CMD $CLANG_ROOT/bin/llvm-link ${input:Inputs} -o ${output;noauto:Output} ${kv;hide:"p LD"} ${kv;hide:"pc light-red"})
}

macro LLVM_OPT(Input, Output, Opts...) {
    PEERDIR(contrib/libs/clang)
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/llvm_opt_wrapper.py"} $CLANG_ROOT/bin/opt ${input:Input} -o ${output;noauto:Output} $Opts ${kv;hide:"p OP"} ${kv;hide:"pc yellow"})
}

when ($NO_DEBUGINFO == "yes") {
    DEBUG_INFO_FLAGS=
}

when ($CLANG && $DEBUGINFO_LINES_ONLY == "yes" && $NO_DEBUGINFO != "yes") {
    DEBUG_INFO_FLAGS=-gline-tables-only
}

# TODO: configurable tar and touch
PACK_TGZ=${cwd:ARCADIA_BUILD_ROOT} tar -czf ${rootrel:OUTPUT} ${rootrel:INPUT} ${kv;hide:"p AR"} ${kv;hide:"pc light-red"}
#TODO: Use ${input:"build/scripts/touch.py"} instead ${ARCADIA_ROOT}/build/scripts/touch.py
macro TOUCH(Outputs...) {
    MACRO_PROP(CMD $YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${output:Outputs})
}
TOUCH_UNIT=$YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${kv;hide:"p UN"} ${kv;hide:"pc light-cyan"} $TARGET
TOUCH_PACKAGE=$YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${kv;hide:"p PK"} ${kv;hide:"pc light-red"} $TARGET && $YMAKE_PYTHON ${input:"build/scripts/copy_to_dir.py"} --dest-dir $BINDIR --build-root $ARCADIA_BUILD_ROOT $PACKED_PACKAGE_ARGS $SRCS_GLOBAL $PEERS
TOUCH_JAVA_UNIT=$YMAKE_PYTHON ${input:"build/scripts/touch.py"} ${kv;hide:"java $CURDIR"} $TARGET

NO_CHECK_IMPORTS_FOR_VALUE=None
when ($SANITIZER_TYPE && $SANITIZER_TYPE == "pg") {
    NO_CHECK_IMPORTS_FOR_VALUE=""
}

macro NO_CHECK_IMPORTS(Masks...) {
    SET(NO_CHECK_IMPORTS_FOR_VALUE $Masks)
}

macro PY_CODENAV(For) {
    MACRO_PROP(CMD ${cwd:BINDIR} $YMAKE_PYTHON ${input:"build/scripts/py_codenav.py"} --tool ${tool:"devtools/codenav/python/pyxref"} --out ${output:For.xref} --binary ${tool:For} ${kv;hide:"p CN"} ${kv;hide:"pc yellow"})
}
